[{"name": "app.py", "content": "\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nfrom shiny import render, reactive\nimport seaborn as sns\n\nimport pandas as pd\n\n# Load palmer penguins data set\npenguins_df = load_penguins()  # Use the function directly without specifying the module\n\n# Set title page\nui.page_opts(title=\"Sandra's Palmer Penguin Data\", fillable=True)\n\n# Create sidebar with open parameter and 2nd level header\nwith ui.sidebar(open=\"open\"):\n    ui.input_slider(\"selected_number_of_bins\", \"Number of Bins\", 0, 100, 10)\n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly bins\", 20)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn bins\", 0, 100, 20)\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr(\"Number of Seaborn bins\")\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"GitHub\", href=\"https://github.com/S572396/cintel-02-data\", target=\"_blank\")\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True\n    )\n    \n    \n# Data Grid\nwith ui.h2(\"Data Grid\"):\n    @render.data_frame\n    def penguins_data_grid():\n        return render.DataGrid(filtered_data(), height=150,)\n\n# Data Table\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Data Table\"):\n        @render.data_frame\n        def penguin_data_table():\n            return render.DataTable(filtered_data(), height=100)\n\n# Plotly Histogram\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Species Histogram\"):\n        @render_plotly\n        def plotly_histogram():\n            plotly_hist = px.histogram(\n                data_frame=filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\"\n            ).update_layout(\n                title=\"Plotly Species Data\",\n                xaxis_title=\"Selected Attribute\",\n                yaxis_title=\"Count\"\n            )\n            return plotly_hist\n\n# Seaborn Histogram\n    with ui.nav_panel(\"Species Seaborn Histogram\"):\n        @render.plot\n        def seaborn_histogram():\n            seaborn_hist = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                hue_order=input.selected_species_list(),\n                legend=True\n            )\n            seaborn_hist.set_title(\"Species Penguin Data\")\n            seaborn_hist.set_ylabel(\"Count\")\n            return seaborn_hist\n\n# Plotly Scatterplot\n    with ui.nav_panel(\"Species Plotly Scatterplot\"):\n        @render_plotly\n        def plotly_scatterplot():\n            scatter = px.scatter(\n                filtered_data(),\n                title=\"Species Penguin Scatterplot\",\n                x=input.selected_attribute(),\n                color= \"species\"\n    \n                \n               \n            )\n            return scatter\n                \n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n    @reactive.calc\n    def filtered_data():\n        return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n\n", "type": "text"}]